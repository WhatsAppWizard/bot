name: Create Draft Release

on:
  workflow_dispatch: # Changed from push to manual trigger

# Grant permissions for creating releases and pushing commits
permissions:
  contents: write

# Prevent multiple instances of the workflow from running concurrently on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history so subsequent version bump commit works correctly
          fetch-depth: 0
          # Use a token with write permissions for the push step
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use your project's Node.js version
          cache: 'npm'

      - name: Get package version
        id: package-version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Install all dependencies (for build)
        run: npm ci

      - name: Build application
        # Ensure you have a 'build' script in package.json
        run: npm run build

      # --- Prepare package for release ---
      - name: Create release package directory
        run: mkdir release-package

      - name: Copy build output and necessary files
        run: |
          # Ensure the target prisma directory exists
          mkdir -p release-package/prisma
          cp -r build release-package/
          # Copy package files (user will run npm install)
          cp package.json package-lock.json release-package/
          # Copy Prisma schema (needed for runtime)
          cp prisma/schema.prisma release-package/prisma/
          # Copy README
          cp README.md release-package/
          # Add any other essential runtime files here (e.g., .env.example, static assets)
          # Example: cp -r public release-package/

      - name: Create ZIP archive
        run: |
          cd release-package
          zip -r ../app-v${{ steps.package-version.outputs.version }}.zip .
          cd ..
      # --- End Prepare package ---

      - name: Create Draft GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          body: "Draft release for version ${{ steps.package-version.outputs.version }}. Contains compiled application and dependencies."
          draft: true
          prerelease: false # Set to true if this is a pre-release
          files: app-v${{ steps.package-version.outputs.version }}.zip
        env:
          # This token is provided by Actions, need write permissions (set above)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version in package.json
        # This step runs only if the previous steps were successful
        run: npm version patch --no-git-tag-version # Bumps patch version (e.g., 1.0.0 -> 1.0.1)

      - name: Commit and push version bump
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          # Get the new version defined by the 'npm version' command
          NEW_VERSION=$(jq -r .version package.json)
          git add package.json package-lock.json # npm version updates both
          git commit -m "chore: bump version to v${NEW_VERSION} [skip ci]" -m "Increment version after release v${{ steps.package-version.outputs.version }}"
          git push origin main
