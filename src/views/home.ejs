<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Bot</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        body {
            padding-top: 20px;
            background-color: #f8f9fa;
        }
        .card {
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .card-title {
            color: #0d6efd;
        }
        .unread-badge {
            font-size: 0.9rem;
            padding: 0.35em 0.65em;
            margin-left: 10px;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h1 class="text-center mb-4">WhatsApp Wizard Control Panel</h1>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Status</h5>
                    <p class="card-text">
                        <span id="status" class="badge bg-primary"><%= status %></span>
                        <span id="unread-count" class="badge bg-danger unread-badge d-none">0 unread</span>
                    </p>
                </div>
            </div>
        </div>
    </div>
    
 
    <div class="row" id="loading-section">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body text-center">
                    <h5 class="card-title">Checking Authentication Status</h5>
                    <div class="spinner-border text-primary my-4" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Please wait while we check your authentication status...</p>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row d-none" id="qr-section">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">QR Code</h5>
                    <div id="qr-container" class="text-center">
                        <% if (qrCodeExists) { %>
                            <img src="/qr-code.png" alt="QR Code" class="img-fluid" id="qr-image">
                        <% } else { %>
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Waiting for QR code to be generated...</p>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row d-none" id="stats-section">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">WhatsApp Stats</h5>
                    <div id="stats-container">
                        <p>You are successfully authenticated with WhatsApp!</p>
                        <div class="alert alert-success">
                            <strong>Connected:</strong> Yes
                        </div>
                        <div class="alert alert-info">
                            <strong>Unread Messages:</strong> <span id="stats-unread-count">0</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    // Connect to Socket.IO server
    const socket = io();
    
    // DOM elements
    const loadingSection = document.getElementById("loading-section");
    const qrSection = document.getElementById("qr-section");
    const statsSection = document.getElementById("stats-section");
    const statusElement = document.getElementById("status");
    const unreadCountElement = document.getElementById("unread-count");
    const statsUnreadCountElement = document.getElementById("stats-unread-count");
    
    socket.emit("check-auth-status");
    
    socket.emit("get-unread-count");
    
    socket.on("qr-update", (data) => {

      
        statusElement.textContent = "QR Code Available";
        
        const qrContainer = document.getElementById("qr-container");
        
 
        let qrImage = document.getElementById("qr-image");
        
        if (!qrImage) {
            qrImage = document.createElement("img");
            qrImage.id = "qr-image";
            qrImage.alt = "QR Code";
            qrImage.className = "img-fluid";
            qrContainer.innerHTML = ""; // Clear waiting message
            qrContainer.appendChild(qrImage);
        }
        
        // Add timestamp to prevent browser caching
        qrImage.src = `/qr-code.png?t=${data.timestamp}`;
    });
    
    // Listen for unread count updates
    socket.on("unread-count", (data) => {
 
        
        // Update unread count in status
        if (data.count > 0) {
            unreadCountElement.textContent = `${data.count} unread`;
            unreadCountElement.classList.remove("d-none");
        } else {
            unreadCountElement.classList.add("d-none");
        }
        
        statsUnreadCountElement.textContent = data.count;
    });
    
    // Listen for authentication status updates
    socket.on("auth-status", (data) => {
 
        
        // Hide loading section
        loadingSection.classList.add("d-none");
        
        if (data.isAuthenticated) {
            // User is authenticated
            qrSection.classList.add("d-none");
            statsSection.classList.remove("d-none");
            statusElement.textContent = "Authenticated";
            statusElement.classList.remove("bg-primary");
            statusElement.classList.add("bg-success");
            
            // Request unread count again
            socket.emit("get-unread-count");
        } else {
            // User is not authenticated
            qrSection.classList.remove("d-none");
            statsSection.classList.add("d-none");
            statusElement.textContent = "Not Authenticated";
            statusElement.classList.remove("bg-success");
            statusElement.classList.add("bg-primary");
            
            // Hide unread count when not authenticated
            unreadCountElement.classList.add("d-none");
        }
    });
    
    // Connection status handling
    socket.on("connect", () => {
        console.log("Connected to server");
    });
    
    socket.on("disconnect", () => {
        console.log("Disconnected from server");
        statusElement.textContent = "Connection lost. Reconnecting...";
        statusElement.classList.remove("bg-primary", "bg-success");
        statusElement.classList.add("bg-warning");
        
        // Show loading section again
        loadingSection.classList.remove("d-none");
        qrSection.classList.add("d-none");
        statsSection.classList.add("d-none");
        
        // Hide unread count when disconnected
        unreadCountElement.classList.add("d-none");
    });
</script>
</body>
</html>
