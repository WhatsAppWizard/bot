version: '3.8'

services:
  whatsapp-wizard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: whatsapp-wizard-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-whatsapp123}@postgres:5432/${POSTGRES_DB:-whatsappwizard}?schema=public
      - REDIS_URL=redis://redis:6379
      - BOT_TOKEN=${BOT_TOKEN}
      - CHAT_ID=${CHAT_ID}
      - POSTHOG_API_KEY=${POSTHOG_API_KEY:-}
      - POSTHOG_HOST=${POSTHOG_HOST:-}
      # Puppeteer specific for containerized environment
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    ports:
      - "3000:3000"
    volumes:
      # Persist WhatsApp session data with specific paths for auth and cache
      - whatsapp_sessions:/app/BTA
      - whatsapp_dev_sessions:/app/DEV
      - whatsapp_auth:/app/.wwebjs_auth
      - whatsapp_cache:/app/.wwebjs_cache
      # Persist media files and QR codes
      - whatsapp_media:/app/public
      # Persist logs
      - whatsapp_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { res.statusCode === 200 ? process.exit(0) : process.exit(1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: whatsapp-wizard-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-whatsapp123}
      - POSTGRES_DB=${POSTGRES_DB:-whatsappwizard}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: whatsapp-wizard-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: whatsapp-wizard-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - whatsapp-network
    profiles:
      - dev

  # Optional: pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4
    container_name: whatsapp-wizard-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - whatsapp-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  whatsapp_sessions:
    driver: local
  whatsapp_dev_sessions:
    driver: local
  whatsapp_auth:
    driver: local
  whatsapp_cache:
    driver: local
  whatsapp_media:
    driver: local
  whatsapp_logs:
    driver: local
  pgadmin_data:
    driver: local

networks:
  whatsapp-network:
    driver: bridge